# 61: Show Audio Length in Offline Tab
Goal: Store audio length in offline transcripts, display in offline table UI.

Tasks:

Update DB schema if needed.

Store audio_duration when restoring/downloading.

Show duration in offline list/table.
---
# 60: Switch AssemblyAI API Endpoint to EU
Update AssemblyAI integration to use api.eu.assemblyai.com instead of US endpoint.


Refactor assemblyaiUploader.js and all API call logic.

Add env/config option for region.

Test full upload/transcribe flow with EU endpoint.
---
# 59: Filename Format Enforcement and Validation
 Ensure uploaded audio and transcript filenames use filename_modifiedDate (dd.mm.yy - hh:mm am/pm) format throughout UI and backend storage.

Add backend/DB validation and error for incorrect format.

Show format hint on frontend upload UI.


---
# 58: Default Audio Upload Settings & Settings UI
 Allow users/admins to configure default upload settings (format, language, model) in a dashboard/settings page.

Add settings table/field in DB (if needed).

Create settings UI in Dashboard for audio upload defaults.

Auto-apply defaults on upload if not overridden.

(label: frontend, backend, settings, enhancement, MVP)
---
# 57: transcription backup/archive system
Keep a complete, immutable backup of all raw AssemblyAI API responses in a separate table (transcription_backups).

Users never delete from this backup; it is only for admin operations (delete, restore, audit).

On every new transcript, the raw API response is copied into this backup table before any user-DB or UI logic.

Restores (when both the main and API records are deleted) can only be done by admin from this backup.

Admin-only API endpoints manage this backup (delete, restore, audit).
---
# 56: Refactor sidebar and explore offline transcription.
-  Sidebar Split

    - Add “Transcription” parent with sub-items: “Online”, “Offline”    - 
    - Move existing AssemblyAI flow to “Online”    - 
    - (label: frontend, enhancement, transcription)

-  Offline Transcription R&D

    - Research local/offline speech-to-text
    - Propose best fit for MVP (e.g., Vosk, Whisper.cpp, local Docker)
---
# 55: Actions directly after upload/transcribe
Immediate Export/Delete

    - Show export and delete buttons after upload result
    - Backend: cascade delete from AssemblyAI
---
# 54: Personalize the topbar with “Welcome {first_name}”.
Topbar Welcome Text:

  -   Show welcome note on left, using current session/user state
  -   (label: frontend, enhancement, UI)
---
# 53: Admin Sidebar + Users Page
- Add “Users” item in sidebar for admins
- Page to fetch, list, edit, create, and delete users (role selector: admin/user)
---
# 52: Role-based Auth Logic
- Store user role in session & frontend store
- Auth middleware for admin-only routes
---
# 51: Forgot Password Logic
- Add "Forgot Password" on sign-in page
- Backend: check email, send reset link
---
# 50: Change Password & Email Confirm
- Add UI for password/email change
- On email change, send confirmation email; update isConfirmed in DB on confirm
- Add backend logic for email confirm flow
---
# 49: Enable Edit in Profile Dialog
- Allow user to edit profile fields (name, email)- 
- Use existing dialog component
---
# 48: Display extra metadata in the transcription detail view
- Add Details:

  -   Show: Speech Model, Features (chips for enabled options), Project (if assigned)  -   
  -   Display beside file name, ID, and Recorded at
---
# 47: Implement history table for user’s AssemblyAI transcriptions
Frontend: History Table

  - Columns:
  - 
  - Date (Jun 12, 2025, 2:00 PM format)
  - 
  - Status
  - 
  - Transcript ID (add copy button per row)
  - 
  - Project
  - 
  - Audio Duration
  - 
  - Integrate export & delete buttons per row
---
# 46: Delete UI
Add delete button on each row and in transcription detail page

Confirmation dialog before action

Optimistic update & backend sync
---
# 45: Export/Download UI
Add export/download buttons for .txt, .pdf, .docx, on detail & history table rows

Use icon + dropdown menu
---
# 44: Implement Delete Endpoint
Add endpoint to delete transcription (from DB, AssemblyAI API, and server file storage)

Remove only for authenticated user or admin
---
# 43: Implement Export Endpoints
Add backend endpoints to export transcription as .txt, .pdf, .docx.

Make sure only the owner can export/download

Use whitelisted transcript fields for security
---
# 42: Testing: Transcription History & Detail Flows
Write backend and frontend tests to cover fetching, filtering, state changes, and error handling for transcription history and details.
---
# 41: Display: Transcription History Table/List UI
Create a modular, responsive MUI table/list to display all transcription history, showing all requested fields, loading states, and allowing row clicks for details.
---
# 40: Sync/Refresh: Update Status & Duration from AssemblyAI
Add backend (and frontend) logic to refresh a transcription’s status/duration by querying AssemblyAI using its API transcript ID, updating the local DB, and syncing the UI.
---
# 39: Transcription State Management: Zustand Store
Implement a feature-based Zustand store for managing transcription state in the frontend.

Handles: loading, error, list, details, active filters

Syncs with backend queries and updates dynamically.
---
# 38: Transcription Filtering & Query: Support DB/API Query by Criteria
Add filtering/query endpoints (and UI controls) to search transcription history by date, status, model, or language.

Update frontend to let users filter/search history dynamically.
---
# 37: Transcription Details: Fetch by TranscriptID (DB + AssemblyAI)
Allow the user to view full details for a single transcription by clicking a row. Fetch from local DB, and fetch details from AssemblyAI if required for real-time status or duration.
---
# 36: Transcription History: Fetch All User Transcriptions
Implement backend and frontend logic to fetch all transcriptions for the authenticated user. Display results in the UI in a table or list with key metadata.

Show: TranscriptID, Date, Status, Audio Duration, Speech Model, Language, Features

Fetch from app DB, optionally fetch real-time status/details from AssemblyAI as needed.
---
# 35: Prepare for Future Enhancements
Audio preview component

Download transcript as .txt

Save to history or tagging 
---
# 34: UX and Error Handling Enhancements
Show error messages on failure (upload/transcribe)

Add retry logic

Support drag-and-drop or click-to-upload
---
# 33: Implement Transcript Result Viewer
Display returned transcript in a scrollable area

Highlight keywords if needed (MVP optional)

Include a “Reset” or “Try another” button
---
# 32: Build Upload UI Component
File input styled with MUI

Status display ("Uploading", "Transcribing", "Done")

Disable interactions during processing
---
# 31: Create Zustand Store for Transcription State
Store audio file, transcription text, loading state, and errors

Expose upload(file) method that internally calls API and updates state
---
# 30: Setup API Layer for Audio Upload
Create features/transcription/api.ts

Implement uploadAudio(file: File): Promise<TranscriptData>

Handle error responses and standardize the return shape
---
# 29: Implement Forgot Password
Implement Forgot Password and integrate with back-end
---
# 28: Add Global Theme Toggle (Dark/Light Mode)
Use your existing ColorModeContext and add a toggle button in the topbar. Sync with MUI and localStorage if needed.

---
# 27: Improve Sidebar Responsiveness
Make sure the sidebar collapses on smaller screens. Add a toggle icon in the topbar for mobile layout.

---
# 26: Create Global Topbar
Build a top navigation bar with:
- App logo
- Collapse sidebar button
- Current user name or avatar
- Sign out button

---
# 25: Add Language Preference Selector
Use a dropdown to let users select preferred UI language. Persist in backend and apply using i18next (if multilingual is implemented).

---
# 24: Add Avatar Upload Component
Create an avatar uploader using MUI. Allow image preview and upload. Send the file to backend and update avatar on success.

---
# 23: Create Edit Profile Form
Allow the user to update fields like display name, language preference, etc. Include validation and API integration.

---
# 22: Build Profile Overview Page
Display user info (name, email, role). Use a card layout. Add a button to edit profile details.

---
# 21: Persist Auth State (Session Check)
On app load, hit the session check route and store user info. Use Zustand or Context to store the state.

---
# 20: Create Protected Route Wrapper
Create a wrapper that checks if the user is authenticated. Redirect to login if unauthenticated. Use Context or Zustand.

---
# 19: Implement Sign Out Button & Logic
Add a sign-out button to the topbar. Call the backend logout route and clear session state on success. Redirect to login.

---
# 18: Implement Sign In UI
Build a login form component using MUI and Tailwind. Connect it to the backend `/login` route. Display form errors and loading states.

---
# 17: implement user register
Implement sign-up with auth and validation
---
# 16: Implement collapse button
Collapse button with proper position and style
---
# 15: Create essential branches
Create all the essential branches locally and push them to GitHub to be used.
---
# 14: Create GitHub Project Board and workflow
Set up a Kanban board for MyMental. Track major features, bugs, and UI progress. Group cards by phase: MVP, AI, polish.

---
# 13: Finalize README.md and project structure
Complete project README with tech stack, project structure, Git flow, and roadmap. Ensure folder layout reflects current state.

---
# 12: Refactor server structure for scalability
Move reusable logic into utils, group route files by feature, add centralized error handler with logging.

---
# 11: Set up Jest and write unit tests for middleware
Use Jest and Supertest to test Express middleware: session handling, validation, logging.

---
# 10: Add Gemini 1.5 AI assistant integration
Connect to Google AI Studio to create a persona-based assistant. Contextually answer questions and extract insights from transcriptions or documents.

---
# 9: Integrate calendar and reminders
Allow users to view events on a calendar. Add UI to schedule or reschedule tasks and get reminders.

---
# 8: Build task manager with CRUD UI
Create a task panel to manage to-dos, categories, due dates, and priorities. Use Zustand or Context API for state.

---
# 7: Document manager with PDF upload and OCR
Enable users to upload PDFs or scans. Process with OCR (Tesseract.js or external API). Display structured content with download/export.

---
# 6: Create transcription viewer with export options
Display saved transcriptions in a searchable list. Add filters by date and content, with ability to download or copy results.

---
# 5: Integrate AssemblyAI for transcription upload
Implement a route to handle audio file uploads and send to AssemblyAI for transcription. Store results and link to user session.

---
# 4: Build profile page and edit form
Create a user profile page with editable fields, avatar upload, and validation.
---
# 3: Create user authentication (register, login)
Create session-based authentication using Express and PostgreSQL. Add routes for user register and login with basic validation and logging.

---
# 2: Set up project theming with tokens and color mode
Use theme.ts and types.ts to apply color tokens, dark/light mode toggle, and consistent typography across the app.  
---
# 1: Implement Sidebar and Routing
Build Sidebar UI using MUI and Tailwind. Integrate with react-router-dom to support navigation between Overview, Profile, Transcriptions, Documents, Tasks, and Calendar.

---
